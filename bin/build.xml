<?xml version="1.0" encoding="UTF-8"?>
<!-- music3 build file 
  Requires database tables set up: use build.xml in subdirectory database.
  For Oracle, requires env variables ORACLE_USER, ORACLE_PW, ORACLE_SITE.
  ORACLE_SITE should be dbs3.cs.umb.edu:1521:dbs3 inside cs.umb.edu.
  From outside, use a tunnel and ORACLE_SITE localhost:1521:dbs3 
  The tunnel uses local port 1521, remote dbs3.cs.umb.edu:1521
  For MySQL use, requires env vars MYSQL_SITE, MYSQL_USER, MYSQL_PW.
  MYSQL_SITE should be "localhost:3333" at home with tunnel
  and topcat.cs.umb.edu in cs.umb.edu. 
  
 
  For HSQLDB use, no user/password info is needed, but you need to
   start the hsqldb server (see build.xml in subdir database).
 -->
<project name="music3" default="build" basedir=".">
	<!--Load environment variables and give them prefix "env."
		Requires environment variables 
		ORACLE_USER, ORACLE_PW, ORACLE_SITE, MYSQL_USER, 
		MYSQL_PW, and MYSQL_SITE for client-server case,
		and also needed for unit tests of web project. 
		CATALINA_HOME and TOMCAT_URL for web case.
		Requires database tables set up: use build.xml in subdirectory database.
	-->
	
	<property environment="env" />
	<!-- on PC, maybe c:\tomcat-8.0, on cs.umb Linux, /home/username/cs636/tomcat-8.0 -->
	<property name="CATALINA_HOME" value="${env.CATALINA_HOME}" />
	<!-- on PC, http://localhost:8080, on cs.umb Linux http://topcat.cs.umb.edu:xxxxx  -->
	<property name="TOMCAT_URL" value="${env.TOMCAT_URL}" />
	<property name="deploy.dir" value="${CATALINA_HOME}/webapps/${ant.project.name}" />
	
	<property name="ORACLE_USER" value="${env.ORACLE_USER}" />
	<property name="ORACLE_PW" value="${env.ORACLE_PW}" />
	<property name="ORACLE_SITE" value="${env.ORACLE_SITE}" />
	<property name="MYSQL_USER" value="${env.MYSQL_USER}" />
	<property name="MYSQL_PW" value="${env.MYSQL_PW}" />
	<property name="MYSQL_SITE" value="${env.MYSQL_SITE}" />
	<!-- assemble DB URLs from env vars. Examples:
	    "jdbc:oracle:thin:@localhost:1531:dbs3"  from home, via tunnel
	    "jdbc:oracle:thin:@dbs3.cs.umb.edu:1521:dbs3" from inside cs.umb.edu firewall
	    "jdbc:mysql://localhost:3333/joedb" when using tunnel to topcat
	    "jdbc:mysql://topcat.cs.umb.edu/joedb" from inside cs.umb.edu
	    -->
	<property name="clientserver-lib.dir" value="lib" />
	<property name="ORACLE_URL" value="jdbc:oracle:thin:@${env.ORACLE_SITE}" />
	<property name="MYSQL_URL" value = "jdbc:mysql://${env.MYSQL_SITE}/${env.MYSQL_USER}db"/>
	<!-- <property name="JAVAAGENT" value="-javaagent:lib/eclipselink.jar"/> -->
	<property name="JAVAAGENT" value="-javaagent:${lib.dir}/eclipselink.jar"/>

	<!-- Global properties for this build -->
	<property name="database.dir" value="database" />
	<property name="src.dir" value="src" />
	<property name="webinf.dir" value="WebContent/WEB-INF" />
	<!-- Note new location of classes, even in client-server case-->
	<property name="classes.dir" value="${webinf.dir}/classes" />
	<!-- the main set of jars is set that is deployed with the web app -->
	<property name="lib.dir" value="${webinf.dir}/lib" />
	<!-- lib has jars needed only for clientserver case, add-ons to main set,
	     which includes all the driver jars.  Note that we do not need to *deploy* 
	     (i.e., install with the web app) the driver jars, because they
	      are not directly used in the web app case. Instead, we need to
	      make sure they are in tomcat's lib dir, so tomcat can create the needed
	      Datasource objects. The preconfigured tomcat has the needed driver jars.
	   -->

	<!-- Classpath declaration: all jars in lib -->
	<path id="project.classpath">
		<pathelement location="${classes.dir}" />
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<!-- put needed JDBC drivers, junit's jar in path too -->
		<fileset dir="${clientserver-lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${CATALINA_HOME}/lib/servlet-api.jar" />	
	</path>
	<target name="init">
		<mkdir dir="${classes.dir}" />
	</target>
	<target name="clean" description="Clean up the derived files">
		<delete dir="${classes.dir}" />
		<!-- delete junit test output -->
		<delete>
			<fileset dir="${basedir}">
				<include name="TEST*.txt" />
			</fileset>
		</delete>
	</target>
	
	<!-- Compile Java source, requesting extra info on deprecated methods -->
	<target name="build" depends="init">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" debug="on" destdir="${classes.dir}" 
			classpathref="project.classpath" includeantruntime="false">
			<compilerarg value="-Xlint:deprecation"/>
		</javac>
	</target>

	<!-- use the power of ant to edit a file, substitute username, pw 
		     to give us persistence.xml with current username, pw in it.
			 
			 This trick is not needed for web case, since username and pw
		 are in tomcat's context.xml, not in persistence.xml.
	 -->
	 <!-- Also note the trick of flag files: touch creates an empty file 
		 (a "flag file") of given filename. Here the existence of the flag file 
		 clientserver.flag means one of the clientserver configs was done.
		 Existence of the flag file web.flag means one of the web configs was done.
		 Each config target deletes the opposite flag file and creates its own type.
		 The targets checkConfigClientServer and checkConfigWeb check for the flag files.
		 Also, the current database int use (oradb or whatever) is saved in a
		 little text file currentdb.txt for display by checkConfigxxx.
		 These little files belong to the ant build system and live in
		 the same directory as build.xml (and don't get deployed).
     -->
	 
	<target name="config-clientserver-oradb" depends="build">
		<echo message="configuring project for Oracle, putting its persistence.xml on classpath" />
		<echo message="replacing username with ${env.ORACLE_USER}, password with ${env.ORACLE_PW}, also site" />
		<!-- and copy persistence.xml to src/META-INF for use from eclipse 
		   (use project refresh, and set Properties>Java Persistence>Connection to Oracle)-->
		<filter token="username" value="${env.ORACLE_USER}" />
		<filter token="password" value="${env.ORACLE_PW}" />
		<filter token="oracle_url" value="${ORACLE_URL}" />
		<copy file="database/oracle/persistence.xml" todir="${src.dir}/META-INF" filtering="true" overwrite="true" />
		<copy file="database/oracle/persistence.xml" todir="${classes.dir}/META-INF" filtering="true" overwrite="true" />
		<echo file="currentdb.txt" message="oradb" />
		<delete file="web.flag" />
		<touch file="clientserver.flag" />
	</target>
	<target name="config-clientserver-mysqldb" depends="build">
		<echo message="configuring project for MySql, putting its persistence.xml on classpath" />
		<echo message="replacing username with ${env.MYSQL_USER}, password with ${env.MYSQL_PW}" />
		<!-- and copy persistence.xml to src/META-INF for use from eclipse 
	      (use project refresh, and set Properties>Java Persistence>Connection to None,
	      to avoid useless validation errors caused by case sensitivity problem)-->
		<filter token="username" value="${env.MYSQL_USER}" />
		<filter token="password" value="${env.MYSQL_PW}" />
		<filter token="mysql_url" value="${MYSQL_URL}" />
		<copy file="database/mysql/persistence.xml" todir="${src.dir}/META-INF" filtering="true" overwrite="true" />
		<copy file="database/mysql/persistence.xml" todir="${classes.dir}/META-INF" filtering="true" overwrite="true" />
		<echo file="currentdb.txt" message="mysqldb" />
		<delete file="web.flag" />
		<touch file="clientserver.flag" />
	</target>
	<target name="config-clientserver-hsqldb">
		<echo message="configuring project for HSQLDB, putting its persistence.xml on classpath" />
		<!-- copy hsql version of persistence.xml (no fixup needed) to classpath -->
		<!-- and copy it to src/META-INF for use from eclipse 
		     (use project refresh, and set Properties>Java Persistence>Connection to HSQLDB)-->
		<copy file="database/hsql/persistence.xml" todir="${src.dir}/META-INF" overwrite="true" />
		<copy file="database/hsql/persistence.xml" todir="${classes.dir}/META-INF" overwrite="true" />
		<echo file="currentdb.txt" message="hsqldb" />
		<delete file="web.flag" />
		<touch file="clientserver.flag" />
	</target>
	<!-- Web Configurations -->
	<target name="config-web-oradb" depends="build">
		<copy file="database/oracle/web-persistence.xml" tofile="${src.dir}/META-INF/persistence.xml" overwrite="true" />
		<copy file="database/oracle/web-persistence.xml" tofile="${classes.dir}/META-INF/persistence.xml" overwrite="true" />
		<echo file="currentdb.txt" message="oradb" />
		<delete file="clientserver.flag" />
		<touch file="web.flag" />
	</target>
	<target name="config-web-mysqldb" depends="build">
		<copy file="database/mysql/web-persistence.xml" tofile="${src.dir}/META-INF/persistence.xml" overwrite="true" />
		<copy file="database/mysql/web-persistence.xml" tofile="${classes.dir}/META-INF/persistence.xml" overwrite="true" />
		<delete file="clientserver.flag" />
		<echo file="currentdb.txt" message="mysqldb" />
		<touch file="web.flag" />
	</target>
	<target name="config-web-hsqldb" depends="build">
		<copy file="database/hsql/web-persistence.xml" tofile="${src.dir}/META-INF/persistence.xml" overwrite="true" />
		<copy file="database/hsql/web-persistence.xml" tofile="${classes.dir}/META-INF/persistence.xml" overwrite="true" />
		<delete file="clientserver.flag" />
		<echo file="currentdb.txt" message="hsqldb" />
		<touch file="web.flag" />
	</target>
	
	<!--check that one of the above client-server config targets has been used -->
	<target name="config-check-clientserver">
		<available file="${classes.dir}/META-INF/persistence.xml" property="configOK" />
		<available file="clientserver.flag" property="csSetup" />
		<fail message="You need to run ant config-clientserver-xxxdb" unless="configOK" />
		<fail message="You need to run ant config-clientserver-xxxdb (not config-web-xxxdb)" unless="csSetup" />
		<loadfile property="currentdb" srcFile="currentdb.txt" />
		<echo message="config-check-clientserver: JPA is set up for client-server use with ${currentdb}" />
	</target>
	
	<!--check that one of the above web config targets has been used -->
	<target name="config-check-web">
		<available file="${classes.dir}/META-INF/persistence.xml" property="configOK" />
		<available file="web.flag" property="webSetup" />
		<fail message="You need to run ant config-web-xxxdb" unless="configOK" />
		<fail message="You need to run ant config-web-xxxdb (not config-clientserver-xxxdb)" unless="webSetup" />
		<loadfile property="currentdb" srcFile="currentdb.txt" />
		<echo message="config-check-web: JPA is set up for web use with ${currentdb}" />
	</target>
	
	<!--check that one of the above config targets has been used -->
	<target name="configCheck">
		<available file="${classes.dir}/META-INF/persistence.xml" property="configOK" />
		<fail message="No persistence.xml on classpath/META-INF. Use ant config-hsqldb, config-mysqldb, or config-oradb" unless="configOK" />
		<echo message="configCheck: OK, found persistence.xml on classpath/META-INF" />
	</target>
	<!-- Note that <formatter> element has no usefile="false" attribute here. 
		Because of this, the formatter writes program output to files,  avoiding
	    the display of all that JPA startup output for tests. Look for files TEST*
	    in the basedir. If a test fails, the formatter will still report that to the console.
	-->
	<!-- default to testing with HSQLDB: run all unit tests -->
	<target name="test" depends="config-clientserver-hsqldb, testDAO, testBL"/>
	<!-- set up "testBL" to run all BL (business layer) unit tests -->
	<!-- Note that you can run this and testDAO with Oracle or MySQL as well as HSQLDB -->
	<target name="testBL" depends="testBL1"/>
	<target name="testBL1" depends = "build, config-check-clientserver">
		<echo message="testBL1 business layer testing...look for details in TEST-*.txt"/>
		<junit fork="true">
		    <jvmarg value="${JAVAAGENT}"/>
			<formatter type="brief" />
			<test name="cs636.music.service.AdminServiceTest1" />
			<classpath refid="project.classpath"/>
		</junit>
	</target>
	<target name="testDAO" depends="testDAO1"/>
	<target name="testDAO1" depends="build, config-check-clientserver">
	<echo message="testDAO1...look for details in TEST-*.txt"/>
		<junit fork="true" printsummary="yes">
		    <jvmarg value="${JAVAAGENT}"/>
			<formatter type="brief"/>
			<test name="cs636.music.dao.DownloadDAOTest" />
			<classpath refid="project.classpath" />
		</junit>
	</target>
	
	<target name="testDAO2" depends="testDAO3"/>
	<target name="testDAO3" depends="build, config-check-clientserver">
	<echo message="testDAO3...look for details in TEST-*.txt"/>
		<junit fork="true" printsummary="yes">
		    <jvmarg value="${JAVAAGENT}"/>
			<formatter type="brief"/>
			<test name="cs636.music.dao.productDAOTest" />
			<classpath refid="project.classpath" />
		</junit>
	</target>

	<target name="UserApp" depends="build">
		<java fork="true" classname="cs636.music.presentation.UserApp" failonerror="true" dir="${basedir}">
		    <jvmarg value="${JAVAAGENT}"/>
			<classpath refid="project.classpath" />
		</java>
	</target>

	<target name="AdminApp" depends="build">
		<java fork="true" classname="cs636.music.presentation.AdminApp" failonerror="true" dir="${basedir}">
		    <jvmarg value="${JAVAAGENT}"/>
			<classpath refid="project.classpath" />
		</java>
	</target>

	<!--Using JPA, we can configure for each database in persistence.xml, use
	         one execution target for all databases-->
	<!--Client-server execution: needs ant config-clientserver-xxxdb first-->
	<target name="sysTest" depends="build, config-check-clientserver">
		<java fork="true" classname="cs636.music.presentation.SystemTest" failonerror="true">
		    <jvmarg value="${JAVAAGENT}"/>
			<classpath refid="project.classpath" />
			<arg file="test.dat" />
		</java>
	</target>
	<target name="userApp" depends="build">
		<java fork="true" classname="cs636.music.presentation.UserApp" failonerror="true" dir="${basedir}">
		    <jvmarg value="${JAVAAGENT}"/>
			<classpath refid="project.classpath" />
		</java>
	</target>

	<target name="adminApp" depends="build">
		<java fork="true" classname="cs636.music.presentation.AdminApp" failonerror="true" dir="${basedir}">
		    <jvmarg value="${JAVAAGENT}"/>
			<classpath refid="project.classpath" />
		</java>
	</target>
	
	<!-- simple deployment: copy WebContent file tree to webapps area -->
	<!-- also, clean up first -->
	<target name="deploy" depends="build, config-check-web">
		<delete dir="${deploy.dir}" />
		<copy todir="${deploy.dir}">
			<fileset dir="WebContent" />
		</copy>
	</target>

</project>
